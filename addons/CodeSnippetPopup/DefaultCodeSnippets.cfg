[add_child]

body="var [@1] = [@2].new()
add_child([@1])
[@3]"
additional_info="Instance a node"

[change_scene]

body="get_tree().change_scene("
additional_info=""

[Delay]

body="yield(get_tree().create_timer([@1]), \"timeout\")"
additional_info="Delay for X seconds"

[Groups examples]

body="# Add this node to my_group
add_to_group(\"my_group\")
# Assert that my_group exists
assert(get_tree().has_group(\"my_group\"))
# Assert that this node is in my_group
assert(self in get_tree().get_nodes_in_group(\"my_group\"))
# Call my_function on my_group
get_tree().call_group(\"my_group\", \"my_function\")
# Call _notification() on nodes in my_group in scene order
# Auto-complete NOTIFICATION_ for options
get_tree().notify_group(\"my_group\", NOTIFICATION_CRASH)
# Flags are GROUP_CALL_REVERSE, GROUP_CALL_REALTIME, GROUP_CALL_UNIQUE
get_tree().notify_group_flags(SceneTree.GROUP_CALL_REVERSE, \"my_group\", NOTIFICATION_CRASH)
# GROUP_CALL_REALTIME will cause the flag to be set immediately, whereas the other set, call, and notify will be deferred.
get_tree().set_group_flags(SceneTree.GROUP_CALL_REALTIME, \"my_group\", \"my_property\", 42)
# Set my_property to 0 on nodes in my_group
get_tree().set_group(\"my_group\", \"my_property\", 0)
# Note that this set will be deferred, ie:
assert(my_property == 42)
yield(get_tree(), \"idle_frame\")
assert(my_property == 0)"
additional_info="Just a long list of examples for using groups"

[InputEventJoypadButton]

body="if event is InputEventJoypadButton:
		if event.device == [@1] and event.button_index == JOY_BUTTON_[@2] and event.pressed:
			[@3]"
additional_info="Detect InputEventJoypadButton press"

[InputEventKey]

body="if event is InputEventKey:
	if event.scancode == KEY_[@1] and event.pressed and not event.echo:
		[@2]"
additional_info="Detect InputEventKey press"

[Load GDScript]

body="var [@1] = preload([@2]).instance()"
additional_info="Instance a resource"

[Next frame]

body="yield(get_tree(), \"idle_frame\")"
additional_info="Yield until next frame"

[NodePath]

body="export var [@1]_path: = NodePath()
onready var [@1]: Node = get_node([@1]_path)[@2]"
additional_info="A Node parameter"

[Editor plugin]

body="tool
extends EditorPlugin


func _enter_tree() -> void:
	pass


func _exit_tree() -> void:
	# Don't forget to queue_free()"
